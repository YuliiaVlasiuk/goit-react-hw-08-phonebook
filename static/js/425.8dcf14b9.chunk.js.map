{"version":3,"file":"static/js/425.8dcf14b9.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectIsLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectFilter],\n    (contacts, search) => {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(search.toLowerCase())\n      );\n    }\n  );\n  ","import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikError } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  gap: 20px;\n  flex-direction: column;\n  width: 450px;\n  padding: 10px;\n  border: 1px solid black;\n  border-radius: 4px;\n`;\nexport const FormField = styled.label`\n  gap: 4px;\n  display: flex;\n  flex-direction: column;\n`;\nexport const ErrorMessage = styled(FormikError)`\n  color: red;\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { nanoid } from 'nanoid';\nimport { Formik, Field } from 'formik';\nimport { Form, FormField, ErrorMessage } from './ContactForm.styled';\n//import { selectContacts } from 'redux/selectors';\n\nimport Notiflix from 'notiflix';\n//import { addContact } from 'redux/operations';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const contacts = useSelector(selectContacts);\n\n  const onChangeName = e => setName(e.currentTarget.value);\n  const onChangePhone = e => setPhone(e.currentTarget.value);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      name,\n      phone,\n    };\n\n    const arrayOfContactsName = [];\n\n    for (const contact of contacts) {\n      arrayOfContactsName.push(contact.name);\n    }\n\n    if (arrayOfContactsName.includes(newContact.name)) {\n      Notiflix.Notify.failure(`${newContact.name} is already in contacts`);\n      return;\n    }\n\n    if (newContact.name === '' || newContact.phone === '') {\n      Notiflix.Notify.failure(`Please enter contact information`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <Formik initialValues={{ name: '', phone: '' }}>\n      <Form onSubmit={handleSubmit}>\n        <FormField>\n          Name\n          <Field\n            name=\"name\"\n            value={name}\n            onChange={onChangeName}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </FormField>\n\n        <FormField>\n          Number\n          <Field\n            type=\"tel\"\n            name=\"phone\"\n            value={phone}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            onChange={onChangePhone}\n          />\n          <ErrorMessage name=\"phone\" component=\"div\" />\n        </FormField>\n\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </Formik>\n  );\n};\n\nNotiflix.Notify.init({\n  position: 'center-top',\n  width: '300px',\n  distance: '10px',\n  opacity: 1,\n  rtl: false,\n  timeout: 1000,\n});\n","import { useSelector } from 'react-redux';\n//import { selectFilter } from 'redux/selectors';\nimport { useDispatch } from 'react-redux';\n//import { checkFilter } from '../../redux/contactsSlice';\n\nimport { selectFilter } from 'redux/contacts/selectors';\n\nimport { checkFilter } from 'redux/contacts/slice';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n  const changeFieldFilter = event =>\n    dispatch(checkFilter(event.currentTarget.value));\n\n  return (\n    <div>\n      <p>Find contacts by name</p>\n      <input type=\"text\" value={filter} onChange={changeFieldFilter}></input>\n    </div>\n  );\n};\n","import { useDispatch } from 'react-redux';\n\nimport PropTypes from 'prop-types';\n//import { deleteContact } from 'redux/operations';\n\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => {\n    dispatch(deleteContact(contact.id));\n  };\n\n  return (\n    <div>\n      <span style={{ width: '220px' }}>\n        {' '}\n        {contact.name} : {contact.phone}{' '}\n      </span>\n      <button onClick={handleDelete}> Delete </button>\n    </div>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    number: PropTypes.string,\n  }).isRequired,\n};\n","import { useSelector } from 'react-redux';\n//import {selectVisibleContacts } from 'redux/selectors';\n\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n//import { selectContacts } from 'redux/contacts/selectors';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\n\nexport const ContactList = () => {\n const visibleContacts = useSelector(selectVisibleContacts);\n\n  //const visibleContacts = useSelector(selectContacts);\n console.log(visibleContacts);\n  return (\n    <ul>\n      {visibleContacts.map(contact => (\n        <li key={contact.id} style={{ paddingBottom: '10px' }}>\n          <ContactItem contact={contact} />\n        </li>\n      ))}\n    </ul>\n );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n//import { Helmet } from 'react-helmet';\n//import { TaskList } from 'components/TaskList/TaskList';\n//import { TaskEditor } from 'components/TaskEditor/TaskEditor';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading,selectContacts } from 'redux/contacts/selectors';\n//import { Layout } from 'components/Layout';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\n\n\nexport default function Contacts() {\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  //const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n   \n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter /> \n        {isLoading &&  <b>Request in progress...</b>}\n        {contacts.length > 0 ? <ContactList /> : <p> Phonebook is empty</p>}\n      </div>\n    \n  );\n}\n"],"names":["selectIsLoading","state","contacts","loading","selectFilter","filter","selectContacts","items","selectVisibleContacts","createSelector","search","contact","name","toLowerCase","includes","Form","styled","FormikForm","FormField","ErrorMessage","FormikError","ContactForm","useState","setName","phone","setPhone","useSelector","dispatch","useDispatch","initialValues","onSubmit","event","preventDefault","newContact","id","nanoid","arrayOfContactsName","push","Notiflix","addContact","value","onChange","e","currentTarget","pattern","component","type","position","width","distance","opacity","rtl","timeout","Filter","checkFilter","ContactItem","style","onClick","deleteContact","ContactList","visibleContacts","console","log","map","paddingBottom","Contacts","isLoading","useEffect","fetchContacts","length"],"sourceRoot":""}